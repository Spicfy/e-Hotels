{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Justin%27s%20study%20place/University%20of%20ottawa/2025%E6%98%A5/CSI2132%20Databases%20I/project/e-Hotels/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { AuthOptions, User } from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const authOptions: AuthOptions = {\r\n    providers: [\r\n        CredentialsProvider({\r\n            name: \"Credentials\",\r\n            credentials: {\r\n                email: { label: \"Email\", type: \"email\" },\r\n                password: { label: \"Password\", type: \"password\" },\r\n            },\r\n            async authorize(credentials): Promise<User | null> {\r\n                if (!credentials) return null;\r\n\r\n                const user = await prisma.user.findUnique({\r\n                    where: { email: credentials.email },\r\n                });\r\n\r\n                if (!user) throw new Error(\"User does not exist\");\r\n\r\n                const isValid = await bcrypt.compare(credentials.password, user.password);\r\n                if (!isValid) throw new Error(\"Wrong password\");\r\n\r\n                return {\r\n                    id: user.id.toString(),\r\n                    name: user.name,\r\n                    email: user.email,\r\n                };\r\n            },\r\n        }),\r\n    ],\r\n    session: { strategy: \"jwt\" as const },\r\n    secret: process.env.NEXTAUTH_SECRET,\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,MAAM,cAA2B;IACpC,WAAW;QACP,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAChB,MAAM;YACN,aAAa;gBACT,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YACpD;YACA,MAAM,WAAU,WAAW;gBACvB,IAAI,CAAC,aAAa,OAAO;gBAEzB,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;oBACtC,OAAO;wBAAE,OAAO,YAAY,KAAK;oBAAC;gBACtC;gBAEA,IAAI,CAAC,MAAM,MAAM,IAAI,MAAM;gBAE3B,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ;gBACxE,IAAI,CAAC,SAAS,MAAM,IAAI,MAAM;gBAE9B,OAAO;oBACH,IAAI,KAAK,EAAE,CAAC,QAAQ;oBACpB,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK;gBACrB;YACJ;QACJ;KACH;IACD,SAAS;QAAE,UAAU;IAAe;IACpC,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACvC;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}}]
}