{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Justin%27s%20study%20place/University%20of%20ottawa/2025%E6%98%A5/CSI2132%20Databases%20I/project/e-Hotels/src/app/api/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport async function POST(req: NextRequest) {\r\n    const { email, password, name } = await req.json();\r\n\r\n    // Check if the user is already existed\r\n    const existingUser = await prisma.user.findUnique({ where: { email } });\r\n    if (existingUser) {\r\n        return NextResponse.json({ message: \"The mail has already been registerednode -e \\\"console.log(require('crypto').randomBytes(32).toString('hex'))\\\"\" }, { status: 400 });\r\n    }\r\n\r\n    // Password Encryption\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Create new user\r\n    const user = await prisma.user.create({\r\n        data: {\r\n            email,\r\n            password: hashedPassword,\r\n            name,\r\n        },\r\n    });\r\n\r\n    return NextResponse.json({ user });\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,KAAK,GAAgB;IACvC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;IAEhD,uCAAuC;IACvC,MAAM,eAAe,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;QAAE,OAAO;YAAE;QAAM;IAAE;IACrE,IAAI,cAAc;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAiH,GAAG;YAAE,QAAQ;QAAI;IAC1K;IAEA,sBAAsB;IACtB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;IAEnD,kBAAkB;IAClB,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;QAClC,MAAM;YACF;YACA,UAAU;YACV;QACJ;IACJ;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE;IAAK;AACpC","debugId":null}}]
}